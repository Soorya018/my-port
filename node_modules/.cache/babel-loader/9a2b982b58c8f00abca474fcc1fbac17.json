{"ast":null,"code":"import React,{useState,useEffect,useCallback}from\"react\";import Container from\"react-bootstrap/Container\";import Jumbotron from\"react-bootstrap/Jumbotron\";import Row from\"react-bootstrap/Row\";import ProjectCard from\"./ProjectCard\";import axios from\"axios\";const dummyProject={name:null,description:null,svn_url:null,stargazers_count:null,languages_url:null,pushed_at:null};const API=\"https://api.github.com\";// const gitHubQuery = \"/repos?sort=updated&direction=desc\";\n// const specficQuerry = \"https://api.github.com/repos/hashirshoaeb/\";\nconst Project=_ref=>{let{heading,username,length,specfic}=_ref;const allReposAPI=\"\".concat(API,\"/users/\").concat(username,\"/repos?sort=updated&direction=desc\");const specficReposAPI=\"\".concat(API,\"/repos/\").concat(username);const dummyProjectsArr=new Array(length+specfic.length).fill(dummyProject);const[projectsArray,setProjectsArray]=useState([]);const fetchRepos=useCallback(async()=>{let repoList=[];try{// getting all repos\nconst response=await axios.get(allReposAPI);// slicing to the length\nrepoList=[...response.data.slice(0,length)];// adding specified repos\ntry{for(let repoName of specfic){const response=await axios.get(\"\".concat(specficReposAPI,\"/\").concat(repoName));repoList.push(response.data);}}catch(error){console.error(error.message);}// setting projectArray\n// TODO: remove the duplication.\nsetProjectsArray(repoList);}catch(error){console.error(error.message);}},[allReposAPI,length,specfic,specficReposAPI]);useEffect(()=>{fetchRepos();},[fetchRepos]);return/*#__PURE__*/React.createElement(Jumbotron,{fluid:true,id:\"projects\",className:\"bg-light m-0\"},/*#__PURE__*/React.createElement(Container,{className:\"\"},/*#__PURE__*/React.createElement(\"h2\",{className:\"display-4 pb-5 text-center\"},heading),/*#__PURE__*/React.createElement(Row,null,projectsArray.length?projectsArray.map((project,index)=>/*#__PURE__*/React.createElement(ProjectCard,{key:\"project-card-\".concat(index),id:\"project-card-\".concat(index),value:project})):dummyProjectsArr.map((project,index)=>/*#__PURE__*/React.createElement(ProjectCard,{key:\"dummy-\".concat(index),id:\"dummy-\".concat(index),value:project})))));};export default Project;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Container","Jumbotron","Row","ProjectCard","axios","dummyProject","name","description","svn_url","stargazers_count","languages_url","pushed_at","API","Project","_ref","heading","username","length","specfic","allReposAPI","concat","specficReposAPI","dummyProjectsArr","Array","fill","projectsArray","setProjectsArray","fetchRepos","repoList","response","get","data","slice","repoName","push","error","console","message","createElement","fluid","id","className","map","project","index","key","value"],"sources":["/Users/arunsoorya/Desktop/Portfolio/home-master/src/components/home/Project.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Row from \"react-bootstrap/Row\";\nimport ProjectCard from \"./ProjectCard\";\nimport axios from \"axios\";\n\nconst dummyProject = {\n  name: null,\n  description: null,\n  svn_url: null,\n  stargazers_count: null,\n  languages_url: null,\n  pushed_at: null,\n};\nconst API = \"https://api.github.com\";\n// const gitHubQuery = \"/repos?sort=updated&direction=desc\";\n// const specficQuerry = \"https://api.github.com/repos/hashirshoaeb/\";\n\nconst Project = ({ heading, username, length, specfic }) => {\n  const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\n  const specficReposAPI = `${API}/repos/${username}`;\n  const dummyProjectsArr = new Array(length + specfic.length).fill(\n    dummyProject\n  );\n\n  const [projectsArray, setProjectsArray] = useState([]);\n\n  const fetchRepos = useCallback(async () => {\n    let repoList = [];\n    try {\n      // getting all repos\n      const response = await axios.get(allReposAPI);\n      // slicing to the length\n      repoList = [...response.data.slice(0, length)];\n      // adding specified repos\n      try {\n        for (let repoName of specfic) {\n          const response = await axios.get(`${specficReposAPI}/${repoName}`);\n          repoList.push(response.data);\n        }\n      } catch (error) {\n        console.error(error.message);\n      }\n      // setting projectArray\n      // TODO: remove the duplication.\n      setProjectsArray(repoList);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [allReposAPI, length, specfic, specficReposAPI]);\n\n  useEffect(() => {\n    fetchRepos();\n  }, [fetchRepos]);\n\n  return (\n    <Jumbotron fluid id=\"projects\" className=\"bg-light m-0\">\n      <Container className=\"\">\n        <h2 className=\"display-4 pb-5 text-center\">{heading}</h2>\n        <Row>\n          {projectsArray.length\n            ? projectsArray.map((project, index) => (\n                <ProjectCard\n                  key={`project-card-${index}`}\n                  id={`project-card-${index}`}\n                  value={project}\n                />\n              ))\n            : dummyProjectsArr.map((project, index) => (\n                <ProjectCard\n                  key={`dummy-${index}`}\n                  id={`dummy-${index}`}\n                  value={project}\n                />\n              ))}\n        </Row>\n      </Container>\n    </Jumbotron>\n  );\n};\n\nexport default Project;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}